// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CameronHonis/chess-arbitrator/clients_manager (interfaces: ClientsManagerI)
//
// Generated by this command:
//
//	mockgen -destination mock/client_manager_mock.go . ClientsManagerI
//

// Package mock_clients_manager is a generated GoMock package.
package mock_clients_manager

import (
	reflect "reflect"

	models "github.com/CameronHonis/chess-arbitrator/models"
	service "github.com/CameronHonis/service"
	websocket "github.com/gorilla/websocket"
	gomock "go.uber.org/mock/gomock"
)

// MockClientsManagerI is a mock of ClientsManagerI interface.
type MockClientsManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockClientsManagerIMockRecorder
}

// MockClientsManagerIMockRecorder is the mock recorder for MockClientsManagerI.
type MockClientsManagerIMockRecorder struct {
	mock *MockClientsManagerI
}

// NewMockClientsManagerI creates a new mock instance.
func NewMockClientsManagerI(ctrl *gomock.Controller) *MockClientsManagerI {
	mock := &MockClientsManagerI{ctrl: ctrl}
	mock.recorder = &MockClientsManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientsManagerI) EXPECT() *MockClientsManagerIMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockClientsManagerI) AddClient(arg0 *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockClientsManagerIMockRecorder) AddClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockClientsManagerI)(nil).AddClient), arg0)
}

// AddDependency mocks base method.
func (m *MockClientsManagerI) AddDependency(arg0 service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", arg0)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockClientsManagerIMockRecorder) AddDependency(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockClientsManagerI)(nil).AddDependency), arg0)
}

// AddEventListener mocks base method.
func (m *MockClientsManagerI) AddEventListener(arg0 service.EventVariant, arg1 service.EventHandler) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventListener", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddEventListener indicates an expected call of AddEventListener.
func (mr *MockClientsManagerIMockRecorder) AddEventListener(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventListener", reflect.TypeOf((*MockClientsManagerI)(nil).AddEventListener), arg0, arg1)
}

// AddNewClient mocks base method.
func (m *MockClientsManagerI) AddNewClient(arg0 *websocket.Conn) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewClient", arg0)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewClient indicates an expected call of AddNewClient.
func (mr *MockClientsManagerIMockRecorder) AddNewClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewClient", reflect.TypeOf((*MockClientsManagerI)(nil).AddNewClient), arg0)
}

// BroadcastMessage mocks base method.
func (m *MockClientsManagerI) BroadcastMessage(arg0 *models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMessage", arg0)
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockClientsManagerIMockRecorder) BroadcastMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockClientsManagerI)(nil).BroadcastMessage), arg0)
}

// Config mocks base method.
func (m *MockClientsManagerI) Config() service.ConfigI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(service.ConfigI)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockClientsManagerIMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockClientsManagerI)(nil).Config))
}

// Dependencies mocks base method.
func (m *MockClientsManagerI) Dependencies() []service.ServiceI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]service.ServiceI)
	return ret0
}

// Dependencies indicates an expected call of Dependencies.
func (mr *MockClientsManagerIMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockClientsManagerI)(nil).Dependencies))
}

// DirectMessage mocks base method.
func (m *MockClientsManagerI) DirectMessage(arg0 *models.Message, arg1 models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DirectMessage indicates an expected call of DirectMessage.
func (mr *MockClientsManagerIMockRecorder) DirectMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectMessage", reflect.TypeOf((*MockClientsManagerI)(nil).DirectMessage), arg0, arg1)
}

// Dispatch mocks base method.
func (m *MockClientsManagerI) Dispatch(arg0 service.EventI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", arg0)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockClientsManagerIMockRecorder) Dispatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockClientsManagerI)(nil).Dispatch), arg0)
}

// GetClient mocks base method.
func (m *MockClientsManagerI) GetClient(arg0 models.Key) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientsManagerIMockRecorder) GetClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientsManagerI)(nil).GetClient), arg0)
}

// OnStart mocks base method.
func (m *MockClientsManagerI) OnStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStart")
}

// OnStart indicates an expected call of OnStart.
func (mr *MockClientsManagerIMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockClientsManagerI)(nil).OnStart))
}

// RemoveClient mocks base method.
func (m *MockClientsManagerI) RemoveClient(arg0 *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockClientsManagerIMockRecorder) RemoveClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockClientsManagerI)(nil).RemoveClient), arg0)
}

// RemoveEventListener mocks base method.
func (m *MockClientsManagerI) RemoveEventListener(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEventListener", arg0)
}

// RemoveEventListener indicates an expected call of RemoveEventListener.
func (mr *MockClientsManagerIMockRecorder) RemoveEventListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventListener", reflect.TypeOf((*MockClientsManagerI)(nil).RemoveEventListener), arg0)
}

// SetParent mocks base method.
func (m *MockClientsManagerI) SetParent(arg0 service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParent", arg0)
}

// SetParent indicates an expected call of SetParent.
func (mr *MockClientsManagerIMockRecorder) SetParent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockClientsManagerI)(nil).SetParent), arg0)
}

// Start mocks base method.
func (m *MockClientsManagerI) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockClientsManagerIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClientsManagerI)(nil).Start))
}
