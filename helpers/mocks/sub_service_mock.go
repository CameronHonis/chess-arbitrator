// Code generated by MockGen. DO NOT EDIT.
// Source: ../sub_service/sub_service.go
//
// Generated by this command:
//
//	mockgen -source=../sub_service/sub_service.go -destination mocks/sub_service_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/CameronHonis/chess-arbitrator/models"
	service "github.com/CameronHonis/service"
	set "github.com/CameronHonis/set"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionServiceI is a mock of SubscriptionServiceI interface.
type MockSubscriptionServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceIMockRecorder
}

// MockSubscriptionServiceIMockRecorder is the mock recorder for MockSubscriptionServiceI.
type MockSubscriptionServiceIMockRecorder struct {
	mock *MockSubscriptionServiceI
}

// NewMockSubscriptionServiceI creates a new mock instance.
func NewMockSubscriptionServiceI(ctrl *gomock.Controller) *MockSubscriptionServiceI {
	mock := &MockSubscriptionServiceI{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionServiceI) EXPECT() *MockSubscriptionServiceIMockRecorder {
	return m.recorder
}

// AddDependency mocks base method.
func (m *MockSubscriptionServiceI) AddDependency(service service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", service)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockSubscriptionServiceIMockRecorder) AddDependency(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockSubscriptionServiceI)(nil).AddDependency), service)
}

// AddEventListener mocks base method.
func (m *MockSubscriptionServiceI) AddEventListener(eventVariant service.EventVariant, fn service.EventHandler) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventListener", eventVariant, fn)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddEventListener indicates an expected call of AddEventListener.
func (mr *MockSubscriptionServiceIMockRecorder) AddEventListener(eventVariant, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventListener", reflect.TypeOf((*MockSubscriptionServiceI)(nil).AddEventListener), eventVariant, fn)
}

// Build mocks base method.
func (m *MockSubscriptionServiceI) Build() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Build")
}

// Build indicates an expected call of Build.
func (mr *MockSubscriptionServiceIMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockSubscriptionServiceI)(nil).Build))
}

// ClientKeysSubbedToTopic mocks base method.
func (m *MockSubscriptionServiceI) ClientKeysSubbedToTopic(topic models.MessageTopic) *set.Set[models.Key] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientKeysSubbedToTopic", topic)
	ret0, _ := ret[0].(*set.Set[models.Key])
	return ret0
}

// ClientKeysSubbedToTopic indicates an expected call of ClientKeysSubbedToTopic.
func (mr *MockSubscriptionServiceIMockRecorder) ClientKeysSubbedToTopic(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientKeysSubbedToTopic", reflect.TypeOf((*MockSubscriptionServiceI)(nil).ClientKeysSubbedToTopic), topic)
}

// Config mocks base method.
func (m *MockSubscriptionServiceI) Config() service.ConfigI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(service.ConfigI)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockSubscriptionServiceIMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockSubscriptionServiceI)(nil).Config))
}

// Dependencies mocks base method.
func (m *MockSubscriptionServiceI) Dependencies() []service.ServiceI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]service.ServiceI)
	return ret0
}

// Dependencies indicates an expected call of Dependencies.
func (mr *MockSubscriptionServiceIMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockSubscriptionServiceI)(nil).Dependencies))
}

// Dispatch mocks base method.
func (m *MockSubscriptionServiceI) Dispatch(event service.EventI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", event)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockSubscriptionServiceIMockRecorder) Dispatch(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockSubscriptionServiceI)(nil).Dispatch), event)
}

// OnBuild mocks base method.
func (m *MockSubscriptionServiceI) OnBuild() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnBuild")
}

// OnBuild indicates an expected call of OnBuild.
func (mr *MockSubscriptionServiceIMockRecorder) OnBuild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBuild", reflect.TypeOf((*MockSubscriptionServiceI)(nil).OnBuild))
}

// OnStart mocks base method.
func (m *MockSubscriptionServiceI) OnStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStart")
}

// OnStart indicates an expected call of OnStart.
func (mr *MockSubscriptionServiceIMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockSubscriptionServiceI)(nil).OnStart))
}

// RemoveEventListener mocks base method.
func (m *MockSubscriptionServiceI) RemoveEventListener(eventId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEventListener", eventId)
}

// RemoveEventListener indicates an expected call of RemoveEventListener.
func (mr *MockSubscriptionServiceIMockRecorder) RemoveEventListener(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventListener", reflect.TypeOf((*MockSubscriptionServiceI)(nil).RemoveEventListener), eventId)
}

// SetParent mocks base method.
func (m *MockSubscriptionServiceI) SetParent(parent service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParent", parent)
}

// SetParent indicates an expected call of SetParent.
func (mr *MockSubscriptionServiceIMockRecorder) SetParent(parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockSubscriptionServiceI)(nil).SetParent), parent)
}

// Start mocks base method.
func (m *MockSubscriptionServiceI) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockSubscriptionServiceIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSubscriptionServiceI)(nil).Start))
}

// SubClient mocks base method.
func (m *MockSubscriptionServiceI) SubClient(clientKey models.Key, topic models.MessageTopic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubClient", clientKey, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubClient indicates an expected call of SubClient.
func (mr *MockSubscriptionServiceIMockRecorder) SubClient(clientKey, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubClient", reflect.TypeOf((*MockSubscriptionServiceI)(nil).SubClient), clientKey, topic)
}

// SubbedTopics mocks base method.
func (m *MockSubscriptionServiceI) SubbedTopics(clientKey models.Key) *set.Set[models.MessageTopic] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubbedTopics", clientKey)
	ret0, _ := ret[0].(*set.Set[models.MessageTopic])
	return ret0
}

// SubbedTopics indicates an expected call of SubbedTopics.
func (mr *MockSubscriptionServiceIMockRecorder) SubbedTopics(clientKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubbedTopics", reflect.TypeOf((*MockSubscriptionServiceI)(nil).SubbedTopics), clientKey)
}

// UnsubClient mocks base method.
func (m *MockSubscriptionServiceI) UnsubClient(clientKey models.Key, topic models.MessageTopic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubClient", clientKey, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubClient indicates an expected call of UnsubClient.
func (mr *MockSubscriptionServiceIMockRecorder) UnsubClient(clientKey, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubClient", reflect.TypeOf((*MockSubscriptionServiceI)(nil).UnsubClient), clientKey, topic)
}

// UnsubClientFromAll mocks base method.
func (m *MockSubscriptionServiceI) UnsubClientFromAll(clientKey models.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubClientFromAll", clientKey)
}

// UnsubClientFromAll indicates an expected call of UnsubClientFromAll.
func (mr *MockSubscriptionServiceIMockRecorder) UnsubClientFromAll(clientKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubClientFromAll", reflect.TypeOf((*MockSubscriptionServiceI)(nil).UnsubClientFromAll), clientKey)
}
