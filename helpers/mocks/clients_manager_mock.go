// Code generated by MockGen. DO NOT EDIT.
// Source: ../clients_manager/clients_manager.go
//
// Generated by this command:
//
//	mockgen -source=../clients_manager/clients_manager.go -destination mocks/clients_manager_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/CameronHonis/chess-arbitrator/models"
	service "github.com/CameronHonis/service"
	websocket "github.com/gorilla/websocket"
	gomock "go.uber.org/mock/gomock"
)

// MockClientsManagerI is a mock of ClientsManagerI interface.
type MockClientsManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockClientsManagerIMockRecorder
}

// MockClientsManagerIMockRecorder is the mock recorder for MockClientsManagerI.
type MockClientsManagerIMockRecorder struct {
	mock *MockClientsManagerI
}

// NewMockClientsManagerI creates a new mock instance.
func NewMockClientsManagerI(ctrl *gomock.Controller) *MockClientsManagerI {
	mock := &MockClientsManagerI{ctrl: ctrl}
	mock.recorder = &MockClientsManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientsManagerI) EXPECT() *MockClientsManagerIMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockClientsManagerI) AddClient(client *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockClientsManagerIMockRecorder) AddClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockClientsManagerI)(nil).AddClient), client)
}

// AddDependency mocks base method.
func (m *MockClientsManagerI) AddDependency(service service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", service)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockClientsManagerIMockRecorder) AddDependency(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockClientsManagerI)(nil).AddDependency), service)
}

// AddEventListener mocks base method.
func (m *MockClientsManagerI) AddEventListener(eventVariant service.EventVariant, fn service.EventHandler) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventListener", eventVariant, fn)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddEventListener indicates an expected call of AddEventListener.
func (mr *MockClientsManagerIMockRecorder) AddEventListener(eventVariant, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventListener", reflect.TypeOf((*MockClientsManagerI)(nil).AddEventListener), eventVariant, fn)
}

// AddNewClient mocks base method.
func (m *MockClientsManagerI) AddNewClient(conn *websocket.Conn) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewClient", conn)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewClient indicates an expected call of AddNewClient.
func (mr *MockClientsManagerIMockRecorder) AddNewClient(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewClient", reflect.TypeOf((*MockClientsManagerI)(nil).AddNewClient), conn)
}

// BroadcastMessage mocks base method.
func (m *MockClientsManagerI) BroadcastMessage(message *models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMessage", message)
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockClientsManagerIMockRecorder) BroadcastMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockClientsManagerI)(nil).BroadcastMessage), message)
}

// Build mocks base method.
func (m *MockClientsManagerI) Build() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Build")
}

// Build indicates an expected call of Build.
func (mr *MockClientsManagerIMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockClientsManagerI)(nil).Build))
}

// Config mocks base method.
func (m *MockClientsManagerI) Config() service.ConfigI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(service.ConfigI)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockClientsManagerIMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockClientsManagerI)(nil).Config))
}

// Dependencies mocks base method.
func (m *MockClientsManagerI) Dependencies() []service.ServiceI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]service.ServiceI)
	return ret0
}

// Dependencies indicates an expected call of Dependencies.
func (mr *MockClientsManagerIMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockClientsManagerI)(nil).Dependencies))
}

// DirectMessage mocks base method.
func (m *MockClientsManagerI) DirectMessage(message *models.Message, clientKey models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectMessage", message, clientKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DirectMessage indicates an expected call of DirectMessage.
func (mr *MockClientsManagerIMockRecorder) DirectMessage(message, clientKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectMessage", reflect.TypeOf((*MockClientsManagerI)(nil).DirectMessage), message, clientKey)
}

// Dispatch mocks base method.
func (m *MockClientsManagerI) Dispatch(event service.EventI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", event)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockClientsManagerIMockRecorder) Dispatch(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockClientsManagerI)(nil).Dispatch), event)
}

// GetClient mocks base method.
func (m *MockClientsManagerI) GetClient(clientKey models.Key) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", clientKey)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientsManagerIMockRecorder) GetClient(clientKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientsManagerI)(nil).GetClient), clientKey)
}

// OnBuild mocks base method.
func (m *MockClientsManagerI) OnBuild() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnBuild")
}

// OnBuild indicates an expected call of OnBuild.
func (mr *MockClientsManagerIMockRecorder) OnBuild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBuild", reflect.TypeOf((*MockClientsManagerI)(nil).OnBuild))
}

// OnStart mocks base method.
func (m *MockClientsManagerI) OnStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStart")
}

// OnStart indicates an expected call of OnStart.
func (mr *MockClientsManagerIMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockClientsManagerI)(nil).OnStart))
}

// RemoveClient mocks base method.
func (m *MockClientsManagerI) RemoveClient(client *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClient", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockClientsManagerIMockRecorder) RemoveClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockClientsManagerI)(nil).RemoveClient), client)
}

// RemoveEventListener mocks base method.
func (m *MockClientsManagerI) RemoveEventListener(eventId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEventListener", eventId)
}

// RemoveEventListener indicates an expected call of RemoveEventListener.
func (mr *MockClientsManagerIMockRecorder) RemoveEventListener(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventListener", reflect.TypeOf((*MockClientsManagerI)(nil).RemoveEventListener), eventId)
}

// SetParent mocks base method.
func (m *MockClientsManagerI) SetParent(parent service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParent", parent)
}

// SetParent indicates an expected call of SetParent.
func (mr *MockClientsManagerIMockRecorder) SetParent(parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockClientsManagerI)(nil).SetParent), parent)
}

// Start mocks base method.
func (m *MockClientsManagerI) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockClientsManagerIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClientsManagerI)(nil).Start))
}
