// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CameronHonis/chess-arbitrator/msg_service (interfaces: MessageServiceI)
//
// Generated by this command:
//
//	mockgen -destination mocks/msg_service_mock.go -package mocks github.com/CameronHonis/chess-arbitrator/msg_service MessageServiceI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/CameronHonis/chess-arbitrator/models"
	service "github.com/CameronHonis/service"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageServiceI is a mock of MessageServiceI interface.
type MockMessageServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceIMockRecorder
}

// MockMessageServiceIMockRecorder is the mock recorder for MockMessageServiceI.
type MockMessageServiceIMockRecorder struct {
	mock *MockMessageServiceI
}

// NewMockMessageServiceI creates a new mock instance.
func NewMockMessageServiceI(ctrl *gomock.Controller) *MockMessageServiceI {
	mock := &MockMessageServiceI{ctrl: ctrl}
	mock.recorder = &MockMessageServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceI) EXPECT() *MockMessageServiceIMockRecorder {
	return m.recorder
}

// AddDependency mocks base method.
func (m *MockMessageServiceI) AddDependency(arg0 service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", arg0)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockMessageServiceIMockRecorder) AddDependency(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockMessageServiceI)(nil).AddDependency), arg0)
}

// AddEventListener mocks base method.
func (m *MockMessageServiceI) AddEventListener(arg0 service.EventVariant, arg1 service.EventHandler) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventListener", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddEventListener indicates an expected call of AddEventListener.
func (mr *MockMessageServiceIMockRecorder) AddEventListener(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventListener", reflect.TypeOf((*MockMessageServiceI)(nil).AddEventListener), arg0, arg1)
}

// Build mocks base method.
func (m *MockMessageServiceI) Build() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Build")
}

// Build indicates an expected call of Build.
func (mr *MockMessageServiceIMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockMessageServiceI)(nil).Build))
}

// Config mocks base method.
func (m *MockMessageServiceI) Config() service.ConfigI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(service.ConfigI)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockMessageServiceIMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockMessageServiceI)(nil).Config))
}

// Dependencies mocks base method.
func (m *MockMessageServiceI) Dependencies() []service.ServiceI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]service.ServiceI)
	return ret0
}

// Dependencies indicates an expected call of Dependencies.
func (mr *MockMessageServiceIMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockMessageServiceI)(nil).Dependencies))
}

// Dispatch mocks base method.
func (m *MockMessageServiceI) Dispatch(arg0 service.EventI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", arg0)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockMessageServiceIMockRecorder) Dispatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockMessageServiceI)(nil).Dispatch), arg0)
}

// HandleMessage mocks base method.
func (m *MockMessageServiceI) HandleMessage(arg0 *models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", arg0)
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockMessageServiceIMockRecorder) HandleMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockMessageServiceI)(nil).HandleMessage), arg0)
}

// OnBuild mocks base method.
func (m *MockMessageServiceI) OnBuild() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnBuild")
}

// OnBuild indicates an expected call of OnBuild.
func (mr *MockMessageServiceIMockRecorder) OnBuild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBuild", reflect.TypeOf((*MockMessageServiceI)(nil).OnBuild))
}

// OnStart mocks base method.
func (m *MockMessageServiceI) OnStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStart")
}

// OnStart indicates an expected call of OnStart.
func (mr *MockMessageServiceIMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockMessageServiceI)(nil).OnStart))
}

// RemoveEventListener mocks base method.
func (m *MockMessageServiceI) RemoveEventListener(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEventListener", arg0)
}

// RemoveEventListener indicates an expected call of RemoveEventListener.
func (mr *MockMessageServiceIMockRecorder) RemoveEventListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventListener", reflect.TypeOf((*MockMessageServiceI)(nil).RemoveEventListener), arg0)
}

// SetParent mocks base method.
func (m *MockMessageServiceI) SetParent(arg0 service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParent", arg0)
}

// SetParent indicates an expected call of SetParent.
func (mr *MockMessageServiceIMockRecorder) SetParent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockMessageServiceI)(nil).SetParent), arg0)
}

// Start mocks base method.
func (m *MockMessageServiceI) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockMessageServiceIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMessageServiceI)(nil).Start))
}
