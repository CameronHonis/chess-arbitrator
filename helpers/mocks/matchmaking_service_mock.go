// Code generated by MockGen. DO NOT EDIT.
// Source: ../matchmaking/matchmaking_service.go
//
// Generated by this command:
//
//	mockgen -source=../matchmaking/matchmaking_service.go -destination mocks/matchmaking_service_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/CameronHonis/chess-arbitrator/models"
	service "github.com/CameronHonis/service"
	gomock "go.uber.org/mock/gomock"
)

// MockMatchmakingServiceI is a mock of MatchmakingServiceI interface.
type MockMatchmakingServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockMatchmakingServiceIMockRecorder
}

// MockMatchmakingServiceIMockRecorder is the mock recorder for MockMatchmakingServiceI.
type MockMatchmakingServiceIMockRecorder struct {
	mock *MockMatchmakingServiceI
}

// NewMockMatchmakingServiceI creates a new mock instance.
func NewMockMatchmakingServiceI(ctrl *gomock.Controller) *MockMatchmakingServiceI {
	mock := &MockMatchmakingServiceI{ctrl: ctrl}
	mock.recorder = &MockMatchmakingServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchmakingServiceI) EXPECT() *MockMatchmakingServiceIMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockMatchmakingServiceI) AddClient(client *models.ClientProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockMatchmakingServiceIMockRecorder) AddClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockMatchmakingServiceI)(nil).AddClient), client)
}

// AddDependency mocks base method.
func (m *MockMatchmakingServiceI) AddDependency(service service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", service)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockMatchmakingServiceIMockRecorder) AddDependency(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockMatchmakingServiceI)(nil).AddDependency), service)
}

// AddEventListener mocks base method.
func (m *MockMatchmakingServiceI) AddEventListener(eventVariant service.EventVariant, fn service.EventHandler) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventListener", eventVariant, fn)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddEventListener indicates an expected call of AddEventListener.
func (mr *MockMatchmakingServiceIMockRecorder) AddEventListener(eventVariant, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventListener", reflect.TypeOf((*MockMatchmakingServiceI)(nil).AddEventListener), eventVariant, fn)
}

// Build mocks base method.
func (m *MockMatchmakingServiceI) Build() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Build")
}

// Build indicates an expected call of Build.
func (mr *MockMatchmakingServiceIMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockMatchmakingServiceI)(nil).Build))
}

// Config mocks base method.
func (m *MockMatchmakingServiceI) Config() service.ConfigI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(service.ConfigI)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockMatchmakingServiceIMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockMatchmakingServiceI)(nil).Config))
}

// Dependencies mocks base method.
func (m *MockMatchmakingServiceI) Dependencies() []service.ServiceI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]service.ServiceI)
	return ret0
}

// Dependencies indicates an expected call of Dependencies.
func (mr *MockMatchmakingServiceIMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockMatchmakingServiceI)(nil).Dependencies))
}

// Dispatch mocks base method.
func (m *MockMatchmakingServiceI) Dispatch(event service.EventI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", event)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockMatchmakingServiceIMockRecorder) Dispatch(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockMatchmakingServiceI)(nil).Dispatch), event)
}

// OnBuild mocks base method.
func (m *MockMatchmakingServiceI) OnBuild() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnBuild")
}

// OnBuild indicates an expected call of OnBuild.
func (mr *MockMatchmakingServiceIMockRecorder) OnBuild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBuild", reflect.TypeOf((*MockMatchmakingServiceI)(nil).OnBuild))
}

// OnStart mocks base method.
func (m *MockMatchmakingServiceI) OnStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStart")
}

// OnStart indicates an expected call of OnStart.
func (mr *MockMatchmakingServiceIMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockMatchmakingServiceI)(nil).OnStart))
}

// RemoveClient mocks base method.
func (m *MockMatchmakingServiceI) RemoveClient(client *models.ClientProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClient", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockMatchmakingServiceIMockRecorder) RemoveClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockMatchmakingServiceI)(nil).RemoveClient), client)
}

// RemoveEventListener mocks base method.
func (m *MockMatchmakingServiceI) RemoveEventListener(eventId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEventListener", eventId)
}

// RemoveEventListener indicates an expected call of RemoveEventListener.
func (mr *MockMatchmakingServiceIMockRecorder) RemoveEventListener(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventListener", reflect.TypeOf((*MockMatchmakingServiceI)(nil).RemoveEventListener), eventId)
}

// SetParent mocks base method.
func (m *MockMatchmakingServiceI) SetParent(parent service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParent", parent)
}

// SetParent indicates an expected call of SetParent.
func (mr *MockMatchmakingServiceIMockRecorder) SetParent(parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockMatchmakingServiceI)(nil).SetParent), parent)
}

// Start mocks base method.
func (m *MockMatchmakingServiceI) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockMatchmakingServiceIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMatchmakingServiceI)(nil).Start))
}
