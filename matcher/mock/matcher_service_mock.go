// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CameronHonis/chess-arbitrator/matcher (interfaces: MatcherServiceI)
//
// Generated by this command:
//
//	mockgen -destination matcher_service_mock.go . MatcherServiceI
//

// Package mock_matcher is a generated GoMock package.
package mock_matcher

import (
	chess "github.com/CameronHonis/chess"
	models "github.com/CameronHonis/chess-arbitrator/models"
	service "github.com/CameronHonis/service"
	set "github.com/CameronHonis/set"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
)

// MockMatcherServiceI is a mock of MatcherServiceI interface.
type MockMatcherServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherServiceIMockRecorder
}

// MockMatcherServiceIMockRecorder is the mock recorder for MockMatcherServiceI.
type MockMatcherServiceIMockRecorder struct {
	mock *MockMatcherServiceI
}

// NewMockMatcherServiceI creates a new mock instance.
func NewMockMatcherServiceI(ctrl *gomock.Controller) *MockMatcherServiceI {
	mock := &MockMatcherServiceI{ctrl: ctrl}
	mock.recorder = &MockMatcherServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatcherServiceI) EXPECT() *MockMatcherServiceIMockRecorder {
	return m.recorder
}

// AcceptChallenge mocks base method.
func (m *MockMatcherServiceI) AcceptChallenge(arg0, arg1 models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptChallenge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptChallenge indicates an expected call of AcceptChallenge.
func (mr *MockMatcherServiceIMockRecorder) AcceptChallenge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptChallenge", reflect.TypeOf((*MockMatcherServiceI)(nil).AcceptChallenge), arg0, arg1)
}

// AddDependency mocks base method.
func (m *MockMatcherServiceI) AddDependency(arg0 service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", arg0)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockMatcherServiceIMockRecorder) AddDependency(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockMatcherServiceI)(nil).AddDependency), arg0)
}

// AddEventListener mocks base method.
func (m *MockMatcherServiceI) AddEventListener(arg0 service.EventVariant, arg1 service.EventHandler) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventListener", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddEventListener indicates an expected call of AddEventListener.
func (mr *MockMatcherServiceIMockRecorder) AddEventListener(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventListener", reflect.TypeOf((*MockMatcherServiceI)(nil).AddEventListener), arg0, arg1)
}

// AddMatch mocks base method.
func (m *MockMatcherServiceI) AddMatch(arg0 *models.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMatch indicates an expected call of AddMatch.
func (mr *MockMatcherServiceIMockRecorder) AddMatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMatch", reflect.TypeOf((*MockMatcherServiceI)(nil).AddMatch), arg0)
}

// Challenge mocks base method.
func (m *MockMatcherServiceI) Challenge(arg0, arg1 models.Key) (*models.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Challenge", arg0, arg1)
	ret0, _ := ret[0].(*models.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Challenge indicates an expected call of Challenge.
func (mr *MockMatcherServiceIMockRecorder) Challenge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Challenge", reflect.TypeOf((*MockMatcherServiceI)(nil).Challenge), arg0, arg1)
}

// ChallengePlayer mocks base method.
func (m *MockMatcherServiceI) ChallengePlayer(arg0 *models.Challenge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChallengePlayer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChallengePlayer indicates an expected call of ChallengePlayer.
func (mr *MockMatcherServiceIMockRecorder) ChallengePlayer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChallengePlayer", reflect.TypeOf((*MockMatcherServiceI)(nil).ChallengePlayer), arg0)
}

// Challenges mocks base method.
func (m *MockMatcherServiceI) Challenges(arg0 models.Key) (*set.Set[models.Challenge], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Challenges", arg0)
	ret0, _ := ret[0].(*set.Set[models.Challenge])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Challenges indicates an expected call of Challenges.
func (mr *MockMatcherServiceIMockRecorder) Challenges(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Challenges", reflect.TypeOf((*MockMatcherServiceI)(nil).Challenges), arg0)
}

// Config mocks base method.
func (m *MockMatcherServiceI) Config() service.ConfigI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(service.ConfigI)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockMatcherServiceIMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockMatcherServiceI)(nil).Config))
}

// DeclineChallenge mocks base method.
func (m *MockMatcherServiceI) DeclineChallenge(arg0, arg1 models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineChallenge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineChallenge indicates an expected call of DeclineChallenge.
func (mr *MockMatcherServiceIMockRecorder) DeclineChallenge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineChallenge", reflect.TypeOf((*MockMatcherServiceI)(nil).DeclineChallenge), arg0, arg1)
}

// Dependencies mocks base method.
func (m *MockMatcherServiceI) Dependencies() []service.ServiceI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].([]service.ServiceI)
	return ret0
}

// Dependencies indicates an expected call of Dependencies.
func (mr *MockMatcherServiceIMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockMatcherServiceI)(nil).Dependencies))
}

// Dispatch mocks base method.
func (m *MockMatcherServiceI) Dispatch(arg0 service.EventI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", arg0)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockMatcherServiceIMockRecorder) Dispatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockMatcherServiceI)(nil).Dispatch), arg0)
}

// ExecuteMove mocks base method.
func (m *MockMatcherServiceI) ExecuteMove(arg0 string, arg1 *chess.Move) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteMove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteMove indicates an expected call of ExecuteMove.
func (mr *MockMatcherServiceIMockRecorder) ExecuteMove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteMove", reflect.TypeOf((*MockMatcherServiceI)(nil).ExecuteMove), arg0, arg1)
}

// MatchByClientKey mocks base method.
func (m *MockMatcherServiceI) MatchByClientKey(arg0 models.Key) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchByClientKey", arg0)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchByClientKey indicates an expected call of MatchByClientKey.
func (mr *MockMatcherServiceIMockRecorder) MatchByClientKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchByClientKey", reflect.TypeOf((*MockMatcherServiceI)(nil).MatchByClientKey), arg0)
}

// MatchById mocks base method.
func (m *MockMatcherServiceI) MatchById(arg0 string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchById", arg0)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchById indicates an expected call of MatchById.
func (mr *MockMatcherServiceIMockRecorder) MatchById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchById", reflect.TypeOf((*MockMatcherServiceI)(nil).MatchById), arg0)
}

// OnStart mocks base method.
func (m *MockMatcherServiceI) OnStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStart")
}

// OnStart indicates an expected call of OnStart.
func (mr *MockMatcherServiceIMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockMatcherServiceI)(nil).OnStart))
}

// RemoveEventListener mocks base method.
func (m *MockMatcherServiceI) RemoveEventListener(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEventListener", arg0)
}

// RemoveEventListener indicates an expected call of RemoveEventListener.
func (mr *MockMatcherServiceIMockRecorder) RemoveEventListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventListener", reflect.TypeOf((*MockMatcherServiceI)(nil).RemoveEventListener), arg0)
}

// RevokeChallenge mocks base method.
func (m *MockMatcherServiceI) RevokeChallenge(arg0, arg1 models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeChallenge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeChallenge indicates an expected call of RevokeChallenge.
func (mr *MockMatcherServiceIMockRecorder) RevokeChallenge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeChallenge", reflect.TypeOf((*MockMatcherServiceI)(nil).RevokeChallenge), arg0, arg1)
}

// SetParent mocks base method.
func (m *MockMatcherServiceI) SetParent(arg0 service.ServiceI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParent", arg0)
}

// SetParent indicates an expected call of SetParent.
func (mr *MockMatcherServiceIMockRecorder) SetParent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockMatcherServiceI)(nil).SetParent), arg0)
}

// Start mocks base method.
func (m *MockMatcherServiceI) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockMatcherServiceIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMatcherServiceI)(nil).Start))
}